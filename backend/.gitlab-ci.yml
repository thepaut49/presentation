default:
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: [ "--tls=false" ]

include:
  - project: $CI_PROJECT_NAMESPACE/pipelines
    ref: maven-pipeline
    file: templates/maven/set_version.yml
  - project: $CI_PROJECT_NAMESPACE/pipelines
    ref: maven-pipeline
    file: templates/common/deploy_image_to_registry.yml
  - project: $CI_PROJECT_NAMESPACE/pipelines
    ref: maven-pipeline
    file: templates/common/container_scanning.yml


stages:
  - set_version
  - compile
  - sonarqube
  - deploy_image_to_registry
  - container_scanning
  - deploy_nexus
  - cleanup
  - release
  - deploy_app

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"  # Définit le répertoire Maven local
  # Instruct Testcontainers to use the daemon of DinD, use port 2375 for non-tls connections.
  DOCKER_HOST: "tcp://docker:2375"
  # Instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""

.maven:
  image: maven:3.9.6-eclipse-temurin-21-jammy
  cache:
    key: maven
    paths:
      - .m2
    policy: pull-push
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Djansi.force=true"
    MAVEN_CLI_OPTS: "--errors --show-version -Dstyle.color=always"
    SONAR_USER_HOME: .m2/sonar
  before_script:
    - mkdir -p ~/.m2
    - echo $MAVEN_SETTINGS_XML | base64 --decode > ~/.m2/settings.xml

compile:
  stage: compile
  extends: .maven
  script:
    - mvn $MAVEN_CLI_OPTS clean compile -DskipTests
  artifacts:
    paths:
      - target/classes
    expire_in: 7 days

unit_tests:
  stage: compile
  extends: .maven
  script:
    - mvn $MAVEN_CLI_OPTS test jacoco:report
  dependencies:
    - compile
  artifacts:
    paths:
      - target/jacoco.exec
      - target/site/jacoco/jacoco.xml
      - target/surefire-reports
      - target/classes  # Ajouter classes compilées comme artefacts
    expire_in: 7 days

sonarqube_analysis:
  stage: sonarqube
  extends: .maven
  script:
    - mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.java.binaries=target/classes
  dependencies:
    - compile
    - unit_tests

build_war:
  stage: compile
  extends: .maven
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  dependencies:
    - compile
    - unit_tests
  artifacts:
    paths:
      - target/backend*.war  # Assurez-vous que le fichier WAR est bien inclus comme artefact
    expire_in: 7 days

deploy_war_to_nexus:
  stage: deploy_nexus
  extends: .maven
  script:
    - mvn $MAVEN_CLI_OPTS deploy -DskipTests
  dependencies:
    - build_war
    - compile
    - unit_tests

# Ajout du job pour la release
release:
  stage: release
  extends: .maven
  only:
    - main  # Limite l'exécution du job à la branche "main"
  script:
    # Configuration de Git pour SSH
    |
    # Installation du client SSH
    apt-get update && apt-get install -y openssh-client
    
    # Décodage de la clé privée et ajout des retours à la ligne
    mkdir -p ~/.ssh
    echo "$SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa
    
    # Ajout de l'hôte GitLab aux hôtes connus
    ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    
    
    # Configuration de Git pour SSH
    git config --global user.name "GitLab CI"
    git config --global user.email "friders49@hotmail.fr"
    git remote set-url origin "git@gitlab.com:thepolo49/data-generator1/backend.git"

    # Récupérer la version actuelle du projet
    export VERSION=$(cat version.txt)
    echo "Version actuelle : $VERSION"
    
    # Si RELEASE_VERSION et NEXT_SNAPSHOT_VERSION ne sont pas définis, les définir à partir de la version actuelle
    if [ -z "$RELEASE_VERSION" ]; then export RELEASE_VERSION=$(echo $VERSION | sed 's/-SNAPSHOT//'); fi
    if [ -z "$NEXT_SNAPSHOT_VERSION" ]; then export NEXT_SNAPSHOT_VERSION=$(echo $RELEASE_VERSION | awk -F. '{$NF += 1; OFS="."; print $0 "-SNAPSHOT"}'); fi

    echo "Release version : $RELEASE_VERSION"
    echo "Next snapshot version : $NEXT_SNAPSHOT_VERSION"
    git checkout -B "$CI_COMMIT_REF_NAME"
    # Lancer la release avec maven-release-plugin
    mvn $MAVEN_CLI_OPTS -DskipTests release:prepare release:perform -B \
      -DreleaseVersion=$RELEASE_VERSION \
      -DdevelopmentVersion=$NEXT_SNAPSHOT_VERSION \
      -DtagNameFormat=@{project.version} \
      -DpushChanges=true \
      -DscmCommentPrefix="[release] " \
      -Dscm.push.force=true
  dependencies:
    - build_war
  when: manual  # Lancer manuellement la release
  artifacts:
    paths:
      - version.txt
  environment:
    name: release
  variables:
    RELEASE_VERSION:
      # Version de la release (ex: 1.0.0)
      value: ""  # Peut être défini manuellement lors du lancement
    NEXT_SNAPSHOT_VERSION:
      # Prochaine version snapshot (ex: 1.0.1-SNAPSHOT)
      value: ""  # Peut être défini manuellement lors du lancement

# Étape manuelle pour nettoyer
cleanup_image:
  stage: cleanup
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      export VERSION=$(cat version.txt)
      export REGISTRY_IMAGE="$CI_REGISTRY_IMAGE:$VERSION"
      echo "Deleting image: $REGISTRY_IMAGE"
      curl --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" \
      --request DELETE \
      "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/registry/repositories/$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/registry/repositories" | jq '.[] | select(.path=="'${CI_PROJECT_PATH}'") | .id')/tags/$VERSION"
  when: manual
  allow_failure: true  # L'étape ne fait pas échouer le pipeline en cas d'erreur

deploy_recette:
  stage: deploy_app
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    # Décodage de la clé privée et ajout des retours à la ligne
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | tr -d '\r' | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Ajout de l'hôte VPS dans les "known_hosts" pour éviter l'erreur "Host key verification failed"
    - ssh-keyscan -p $SSH_PORT -H $VPS_HOST >> ~/.ssh/known_hosts
  script:
    # Variables pour le nom du groupe et du projet
    - GROUP_NAME="$CI_PROJECT_NAMESPACE"
    - PROJECT_NAME="$CI_PROJECT_NAME"
    - DEPLOY_DIR="~/deployments"
    - DEPLOY_DIR="$DEPLOY_DIR/$GROUP_NAME/$PROJECT_NAME"
    - export VERSION=$(cat version.txt)

    # Créer le dossier de déploiement sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "mkdir -p $DEPLOY_DIR"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "rm -rf $DEPLOY_DIR/*"

    # Copier le fichier docker-compose.yml sur le VPS via SCP
    - scp -P $SSH_PORT docker-compose.yml gitlab-deploy@$VPS_HOST:$DEPLOY_DIR/docker-compose.yml

    # Utiliser docker-compose pour déployer les services
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && echo \"VERSION=$VERSION\" > .env &&  echo \"CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE\" >> .env &&  echo \"BACKEND_USER=$BACKEND_USER\" >> .env &&  echo \"BACKEND_USER_PASSWORD=$BACKEND_USER_PASSWORD\" >> .env"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env pull"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env down"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env up -d && rm .env"
  dependencies:
    - deploy_image_to_registry
  environment:
    name: recette
    url: https://backend.thepaut-antoine.ovh
  only:
    - branches
  except:
    - tags
  when: manual

deploy_prod:
  stage: deploy_app
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    # Décodage de la clé privée et ajout des retours à la ligne
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | tr -d '\r' | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Ajout de l'hôte VPS dans les "known_hosts" pour éviter l'erreur "Host key verification failed"
    - ssh-keyscan -p $SSH_PORT -H $VPS_HOST >> ~/.ssh/known_hosts
  script:
    # Variables pour le nom du groupe et du projet
    - GROUP_NAME="$CI_PROJECT_NAMESPACE"
    - PROJECT_NAME="$CI_PROJECT_NAME"
    - DEPLOY_DIR="~/deployments"
    - DEPLOY_DIR="$DEPLOY_DIR/$GROUP_NAME/$PROJECT_NAME"
    - export VERSION=$(cat version.txt)

    # Créer le dossier de déploiement sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "mkdir -p $DEPLOY_DIR"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "rm -rf $DEPLOY_DIR/*"

    # Copier le fichier docker-compose.yml sur le VPS via SCP
    - scp -P $SSH_PORT docker-compose.yml gitlab-deploy@$VPS_HOST:$DEPLOY_DIR/docker-compose.yml

    # Utiliser docker-compose pour déployer les services
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && echo \"VERSION=$VERSION\" > .env &&  echo \"CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE\" >> .env &&  echo \"BACKEND_USER=$BACKEND_USER\" >> .env &&  echo \"BACKEND_USER_PASSWORD=$BACKEND_USER_PASSWORD\" >> .env"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env pull"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env down"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && docker compose -f docker-compose.yml --env-file .env up -d && rm .env"
  dependencies:
    - deploy_image_to_registry
  environment:
    name: production
    url: https://backend.thepaut-antoine.ovh
  only:
    - tags
  when: manual

