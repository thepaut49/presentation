default:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind

include:
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/common/set_version@1.0.0
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/common/deploy_image_to_registry@1.0.0
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/common/container_scanning@1.0.0

stages:
  - set_version
  - deploy_image_to_registry
  - container_scanning
  - deploy_app
  - cleanup

variables:
  DOCKER_IMAGE_NAME: "data-generator_databases"
  # When using dind service, you must instruct docker to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2375 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2375
  #
  DOCKER_HOST: tcp://docker:2375
  #
  # This instructs Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  SKIP_TO_DEPLOY: "false" # Valeur par défaut

deploy_recette:
  stage: deploy_app
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    # Décodage de la clé privée et ajout des retours à la ligne
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | tr -d '\r' | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Ajout de l'hôte VPS dans les "known_hosts" pour éviter l'erreur "Host key verification failed"
    - ssh-keyscan -p $SSH_PORT -H $VPS_HOST >> ~/.ssh/known_hosts
  script:
    # Variables pour le nom du groupe et du projet
    - GROUP_NAME="$CI_PROJECT_NAMESPACE"
    - PROJECT_NAME="$CI_PROJECT_NAME"
    - DEPLOY_DIR="~/deployments"
    - DEPLOY_DIR="$DEPLOY_DIR/$GROUP_NAME/$PROJECT_NAME"
    - export VERSION=$(echo "$CI_COMMIT_REF_SLUG" | tr '[:upper:]' '[:lower:]')

    # Créer le dossier de déploiement sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "mkdir -p $DEPLOY_DIR"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "rm -rf $DEPLOY_DIR/*"

    # Copier le fichier docker-compose.yml sur le VPS via SCP
    - scp -P $SSH_PORT docker-compose.yml $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/docker-compose.yml

    # Copier le script et les backups sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && mkdir -p backend/backup && mkdir -p keycloak/backup"
    - scp -P $SSH_PORT restore.sh $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/restore.sh
    - scp -P $SSH_PORT backend/01_init_db.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/backend/01_init_db.sql
    - scp -P $SSH_PORT keycloak/05_init_db.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/keycloak/05_init_db.sql
    - scp -P $SSH_PORT backend/backup/03_backup.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/backend/backup/03_backup.sql
    - scp -P $SSH_PORT keycloak/backup/06_backup.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/keycloak/backup/06_backup.sql

    # Utiliser docker-compose pour déployer les services
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml pull"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml down"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml up -d"

    # Exécuter le script de restauration sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && chmod +x restore.sh && export POSTGRES_PASSWORD=$'POSTGRES_PASSWORD' && export BACKEND_USER_PASSWORD=$'BACKEND_USER_PASSWORD' && export KC_DB_PASSWORD=$'KC_DB_PASSWORD' && ./restore.sh $POSTGRES_PASSWORD $BACKEND_USER_PASSWORD $KC_DB_PASSWORD"
  dependencies:
    - deploy_image_to_registry
  environment:
    name: recette
  only:
    - branches
  except:
    - tags
  when: manual

deploy_prod:
  stage: deploy_app
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    # Décodage de la clé privée et ajout des retours à la ligne
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | tr -d '\r' | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # Ajout de l'hôte VPS dans les "known_hosts" pour éviter l'erreur "Host key verification failed"
    - ssh-keyscan -p $SSH_PORT -H $VPS_HOST >> ~/.ssh/known_hosts
  script:
    # Variables pour le nom du groupe et du projet
    - GROUP_NAME="$CI_PROJECT_NAMESPACE"
    - PROJECT_NAME="$CI_PROJECT_NAME"
    - DEPLOY_DIR="~/deployments"
    - DEPLOY_DIR="$DEPLOY_DIR/$GROUP_NAME/$PROJECT_NAME"
    - export VERSION=$(echo "$CI_COMMIT_REF_SLUG" | tr '[:upper:]' '[:lower:]')

    # Créer le dossier de déploiement sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "mkdir -p $DEPLOY_DIR"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "rm -rf $DEPLOY_DIR/*"

    # Copier le fichier docker-compose.yml sur le VPS via SCP
    - scp -P $SSH_PORT docker-compose.yml $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/docker-compose.yml

    # Copier le script et les backups sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && mkdir -p backend/backup && mkdir -p keycloak/backup"
    - scp -P $SSH_PORT restore.sh $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/restore.sh
    - scp -P $SSH_PORT backend/01_init_db.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/backend/01_init_db.sql
    - scp -P $SSH_PORT keycloak/05_init_db.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/keycloak/05_init_db.sql
    - scp -P $SSH_PORT backend/backup/03_backup.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/backend/backup/03_backup.sql
    - scp -P $SSH_PORT keycloak/backup/06_backup.sql $VPS_USER_DEPLOY@$VPS_HOST:$DEPLOY_DIR/keycloak/backup/06_backup.sql

    # Utiliser docker-compose pour déployer les services
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml pull"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml down"
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && VERSION=$VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f docker-compose.yml up -d"

    # Exécuter le script de restauration sur le VPS
    - ssh -i ~/.ssh/id_rsa -p $SSH_PORT $VPS_USER_DEPLOY@$VPS_HOST "cd $DEPLOY_DIR && chmod +x restore.sh && export POSTGRES_PASSWORD=$'POSTGRES_PASSWORD' && export BACKEND_USER_PASSWORD=$'BACKEND_USER_PASSWORD' && export KC_DB_PASSWORD=$'KC_DB_PASSWORD' && ./restore.sh $POSTGRES_PASSWORD $BACKEND_USER_PASSWORD $KC_DB_PASSWORD"
  dependencies:
    - deploy_image_to_registry
  environment:
    name: production
  only:
    - tags
  when: manual

